#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let mongo = require('mongodb');
let assert = require('assert');
let debug = require('debug')('lifetracker:server');
let http = require('http');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);


// Connect to the database and start the server
mongo.MongoClient.connect(process.env.MONGODB_URI, (err, database) => {

    // No error while connecting
    assert.equal(null, err);

    console.log('Connected to database');

    // Get reference to the database
    app.locals.db = database;

    // Listen on provided port, on all network interfaces.

    server.listen(port, () => {
        console.log('Node app is running on port', app.get('port'));
    });
    server.on('error', onError);
    server.on('listening', onListening);

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
